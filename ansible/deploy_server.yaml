#---------------------------------- Ansible Playbook ----------------------------------#
#------------------ https://docs.ansible.com/ansible/2.9/modules/ ---------------------#

#---------------------------------- Server Creation Job ----------------------------------#
- name: Create AWS Resources
  hosts: localhost
  connection: local
  gather_facts: False
  vars_files:
    - ../.env
  vars:
    ansible_host_key_checking: False
    ansible_python_interpreter: /usr/bin/python3

  tasks:

    #VPC: https://docs.ansible.com/ansible/2.9/modules/ec2_vpc_net_module.html
    - name: Create VPC
      ec2_vpc_net:  
        state: present              
        name: "{{ aws_vpc_name }}"
        cidr_block: "{{ aws_vpc_cidr }}"
        region: "{{ aws_region }}"                
        dns_hostnames: yes
        dns_support: yes
        multi_ok: no
        tags:
          Name: "{{ aws_vpc_name }}"
      register: vpc

    #Subnet: https://docs.ansible.com/ansible/2.9/modules/ec2_vpc_subnet_module.html
    - name: Associate subnet to the VPC
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        cidr: "{{ aws_subnet_cidr }}"
        map_public: yes
        az: "{{ aws_subnet_az }}"
        resource_tags:
          Name: "{{ aws_vpc_name }}_subnet"
        wait: yes
      register: subnet

    #Internet gateway: https://docs.ansible.com/ansible/2.9/modules/ec2_vpc_igw_module.html 
    - name: Create internet gateway
      ec2_vpc_igw:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        tags:
          Name: "{{ aws_vpc_name }}_igw"
      register: igw

    #Route Table: https://docs.ansible.com/ansible/2.9/modules/ec2_vpc_route_table_module.html
    - name: Create Route table for public Subnet
      ec2_vpc_route_table:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        subnets:
          - "{{ subnet.subnet.id }}"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        tags:
          Name: "{{ aws_vpc_name }}_public_rt"
      register: rt

    #Security Group: https://docs.ansible.com/ansible/2.9/modules/ec2_group_module.html
    - name: Create security group
      ec2_group:
        state: present
        name: "{{ aws_vpc_name }}_sg"
        description: "{{ aws_vpc_name }}_sg"
        vpc_id: "{{ vpc.vpc.id }}"
        region: "{{ aws_region }}"
        rules:
          - proto: tcp            #Open Protocol
            ports:                #Open Ports
              - 80                #HTTP
              - 22                #SSH
            cidr_ip: 0.0.0.0/0    #UNSECURED For Project Only
            rule_desc: open to the world
      register: sg

    #EC2 Instance: https://docs.ansible.com/ansible/2.9/modules/ec2_module.html
    - name: Create EC2 instance
      ec2:
        wait: yes
        instance_type: "{{ aws_server_type }}"
        image: "{{ aws_centos_ami }}"
        region: "{{ aws_region }}"
        group_id: "{{ sg.group_id }}"
        vpc_subnet_id: "{{ subnet.subnet.id }}"
        key_name: "{{ aws_keypair_name }}"
        volumes:
          - device_name: "{{ aws_server_volume_device_name }}"
            volume_type: "{{ aws_server_volume_type }}"
            volume_size: "{{ aws_server_volume_size }}"
            delete_on_termination: true                     #So the storage will be deleted with server and wont remain active
        count_tag:
          Name: "{{ aws_server_name }}"
          Environment: "{{ env }}"
        exact_count: 1
        instance_tags:
          Name: "{{ aws_server_name }}"
          Environment: "{{ env }}"
        wait_timeout: 300
        assign_public_ip: yes
      register: server_ec2

    #Debug: https://docs.ansible.com/ansible/2.9/modules/debug_module.html 
    - debug: 
        msg: The Server's Public IP is {{ server_ec2.tagged_instances[0].public_ip }}

    #https://docs.ansible.com/ansible/2.9/modules/add_host_module.html 
    - name: Add server to app group of ssh hosts
      add_host: 
        name: "{{ server_ec2.tagged_instances[0].public_ip }}"
        groups: app

    #---------------------------------- Save to var file ----------------------------------#
    #Save to file https://docs.ansible.com/ansible/2.9/modules/lineinfile_module.html
    - name: Add VPC definition to vars file
      lineinfile:
        path: ../saved.env
        regexp: "vpc_id: "
        line: "vpc_id: {{ vpc.vpc.id }}"
        state: present
        create: True
    - name: Add subnet definition to vars file
      lineinfile:
        path: ../saved.env
        regexp: "subnet_id: "
        line: "subnet_id: {{ subnet.subnet.id }}"
        state: present
        create: True
    - name: Add internet gateway definition to vars file
      lineinfile:
        path: ../saved.env
        regexp: "igw_id: "
        line: "igw_id: {{ igw.gateway_id }}"
        state: present
        create: True
    - name: Add rout table definition to vars file
      lineinfile:
        path: ../saved.env
        regexp: "rt_id: "
        line: "rt_id: {{ rt.route_table.id }}"
        state: present
        create: True
    - name: Add Server's Public IP to vars file
      lineinfile:
        path: ../saved.env
        regexp: "server_ip: "
        line: "server_ip: {{ server_ec2.tagged_instances[0].public_ip }}"
        state: present
        create: True
    - name: Add Server's ID to vars file
      lineinfile:
        path: ../saved.env
        regexp: "server_id: "
        line: "server_id: {{ server_ec2.tagged_instances[0].id }}"
        state: present
        create: True

    #wait: https://docs.ansible.com/ansible/2.9/modules/wait_for_module.html
    - name: Wait for SSH to start using external IP
      wait_for:
        host: "{{ server_ec2.tagged_instances[0].public_ip }}"
        port: 22
        timeout: 300


#---------------------------------- Server Setup Job ----------------------------------#

- name: Setup web server
  hosts: app
  user: centos
  become: True
  gather_facts: True
  vars_files:
    - ../.env
    - ../saved.env
    - ../secret.env
  vars:
    ansible_host_key_checking: False
    
  tasks:
    #yum: https://docs.ansible.com/ansible/2.9/modules/yum_module.html
    - name: Install base packages
      yum:
        name:
          - epel-release
        state: present
    - name: Install base packages
      yum:
        name:
          - git
          - yum-utils
          - python-pip
        state: present

    #---------------------------------- Docker Setup on server ----------------------------------#

    #shell: https://docs.ansible.com/ansible/2.9/modules/shell_module.html
    #https://docs.docker.com/engine/install/centos/ 
    - name: Download docker 
      shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

    #yum: https://docs.ansible.com/ansible/2.9/modules/yum_module.html
    - name: Install docker packages
      yum:
         name:
           - docker-ce
           - docker-ce-cli
           - docker-compose-plugin
           - containerd.io
          #  - docker-ce-cidr_block
          #  - docker-compose
         state: present
      
    #service: https://docs.ansible.com/ansible/2.9/modules/service_module.html
    - name: Restart docker service
      service:
        name: docker
        state: restarted
        enabled: yes

    #---------------------------------- Clone and Run app on docker ----------------------------------#

    #copy: https://docs.ansible.com/ansible/2.9/modules/copy_module.html
    - name: Copy key file from local host to server with owner permissions
      copy:
        src: "~/.ssh/id_rsa"
        dest: "~/.ssh/id_rsa"
        mode: '0600'

    #git: https://docs.ansible.com/ansible/2.9/modules/git_module.html
    - name: Clone git repository in server
      git:
        repo: "{{ git_repo }}"
        dest: /opt/{{ app_name }}   #TODO: CHECK
        version: main
        key_file: ~/.ssh/id_rsa
        accept_hostkey: yes
        force: yes
      
    #shell: https://docs.ansible.com/ansible/2.9/modules/shell_module.html
    - name: Build docker image and push to DockerHub          #Loop for running all these docker commands
      shell: "{{ item }}"
      args:
        chdir: /opt/{{ app_name }}
      with_items:
        #Login to DockerHub
        - docker login --username {{ docker_user }} --password {{ docker_access_token }}            
        #Build an image from a Dockerfile with tag 'latest' and using project folder as context folder
        - docker build --file docker/Dockerfile.server --tag {{ server_image }} .
        - docker build --file docker/Dockerfile.client --tag {{ client_image }} .
        #Push the image to DockerHub
        - docker push {{ server_image }}                                    
        - docker push {{ client_image }}                                   

    - name: Start docker app
      #Create and start containers in the background (Detached mode)
      shell: docker compose --file docker/docker-compose.yml --project-directory . up --detach                      
      args:
        chdir: /opt/{{ app_name }}
    
    #Debug: https://docs.ansible.com/ansible/2.9/modules/debug_module.html 
    - debug:
        msg: -"Replace Server's Public IP in GitHub to {{ server_ip }}"
             -"Your app is available at http://{{ server_ip }}"
